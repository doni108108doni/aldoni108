{
  "name": "Observable",
  "type": "interface",
  "defined": {
    "spec": {
      "title": "Observable",
      "url": "https://wicg.github.io/observable/"
    },
    "fragment": "[Exposed=*]\ninterface Observable {\n  constructor(SubscribeCallback callback);\n  undefined subscribe(optional ObserverUnion observer = {}, optional SubscribeOptions options = {});\n\n  // Constructs a native Observable from value if itâ€™s any of the following:\n  //   - Observable\n  //   - AsyncIterable\n  //   - Iterable\n  //   - Promise\n  static Observable from(any value);\n\n  // Observable-returning operators. See \"Operators\" section in the spec.\n  //\n  // takeUntil() can consume promises, iterables, async iterables, and other\n  // observables.\n  Observable takeUntil(any notifier);\n  Observable map(Mapper mapper);\n  Observable filter(Predicate predicate);\n  Observable take(unsigned long long amount);\n  Observable drop(unsigned long long amount);\n  Observable flatMap(Mapper mapper);\n  Observable switchMap(Mapper mapper);\n  Observable inspect(optional ObservableInspectorUnion inspect_observer = {});\n  Observable catch(CatchCallback callback);\n  Observable finally(VoidFunction callback);\n\n  // Promise-returning operators.\n  Promise<sequence<any>> toArray(optional SubscribeOptions options = {});\n  Promise<undefined> forEach(Visitor callback, optional SubscribeOptions options = {});\n  Promise<boolean> every(Predicate predicate, optional SubscribeOptions options = {});\n  Promise<any> first(optional SubscribeOptions options = {});\n  Promise<any> last(optional SubscribeOptions options = {});\n  Promise<any> find(Predicate predicate, optional SubscribeOptions options = {});\n  Promise<boolean> some(Predicate predicate, optional SubscribeOptions options = {});\n  Promise<any> reduce(Reducer reducer, optional any initialValue, optional SubscribeOptions options = {});\n};",
    "href": "https://wicg.github.io/observable/#observable"
  },
  "extended": [],
  "inheritance": null,
  "includes": []
}